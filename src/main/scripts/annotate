#!/usr/bin/python
#-----------------------------------------------------------------------
# critTer
#-----------------------------------------------------------------------

import sys


#-----------------------------------------------------------------------
#-----------------------------------------------------------------------

# Splice pragmas into file frompath which indicate line numbers, and
# which delimit includes of standard .h files.  Store the result in
# file topath.

def annotate(frompath, topath):
    num = 1
    with open(frompath, 'r') as student_code:
        with open(topath, 'w') as modded:
            modded.write('typedef int* __WAIT_STATUS;\n')
            for line in student_code:
                modded.write('#pragma critTer:' + str(num) + ':' + str(frompath) + ':\n')
                if (line.lstrip().startswith('#include')) \
                        and ('<' in line) and ('>' in line):
                    modded.write('#pragma critTer:startStdInclude:\n')
                    modded.write(line)
                    modded.write('#pragma critTer:endStdInclude:\n')
                elif (line.lstrip().startswith('#include')) \
                        and ('\"' in line):
                    modded.write('#pragma critTer:startStudentInclude:\n')
                    modded.write(line)
                    modded.write('#pragma critTer:endStudentInclude:\n')
                else:
                    modded.write(line)
                num += 1

#-----------------------------------------------------------------------

def main():

    annotate(sys.argv[1], sys.argv[2])


#-----------------------------------------------------------------------

if __name__ == "__main__":
    main()
